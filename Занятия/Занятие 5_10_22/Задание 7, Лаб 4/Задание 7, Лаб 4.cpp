// Задание 7, Лаб 4.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <vector>

                                    //РЕАЛИЗАЦИЯ БИНАРНОГО ПОИСКА
                                    // РЕАЛИЗАЦИЯ СОРТИРОВКИ ВСТАВКАМИ

/*7. (Лаб раб №4) 
Написать функцию, 
которая производит двоичный поиск 
места размещения нового элемента в упорядоченном массиве и 
возвращает  место включения нового элемента. 
С помощью данной функции реализовать сортировку вставками. */

using std::cout;
using std::cin;
using std::vector;

int BinSearch(const vector<int>&, size_t, int); //бинарный поиск
void InsertSort(vector<int>&); //сортировка вставками

int main()
{
    vector<int> vec = { 1,13,5,8,19,14,15 };
    InsertSort(vec);
    for (int i : vec)
    {
        cout << i << " ";
    }
    return 0;
}

int BinSearch(const vector<int> &v, size_t size, int key) // массив v должен быть отсортирован по возрастанию
{
    int right = size;           // правая граница
    int left = 0;                   // левая граница
    int mid = (left + right) / 2;   //середина

    while (left < right)
    {
        if (key > v[mid])
        {
            left = mid+1;       //необходимо прибавлять 1 либо к left либо к right (в нашем случае left),
        }                       //чтобы поиск не зациклился и mid не переходил между 2-мя соседними элементами
        else
        {
            if (key < v[mid])
            {
                right = mid;        // сдвигаем правую границу
            }
            else
            {
                return mid;         // найден искомый элемент
            }
        }

        mid = (left + right) / 2;       //необходимо пересчитывать mid на каждой итерации
    }

    return left;      //элемента key нет в массиве
}

void InsertSort(vector<int>& v)     //сортируем по возрастанию
{
    for (size_t i = 1; i < v.size(); i++)
    {
        int temp = v[i];  // первый элемент из неотсортированной части, необходимо сравнить с отсортированной частью

        int pos = BinSearch(v, i, temp);    //оптимизация за счет бинарного поиска
        
        int j;

        for (j = i-1; j >= pos; j--)      //здесь отсортироанная часть сдвигается для принятия нового элемента
        {
            v[j+1] = v[j];
        }

        v[pos] = temp;
    }
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
